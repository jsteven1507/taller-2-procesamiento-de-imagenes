import numpy as np #librería en la que se define un tipo de dato que representa matrices multidimensionales
# además incluye algunas funcionalidades básicas para trabajar con ellas

import cv2 #OpenCV es una biblioteca libre de visión artificial originalmente desarrollada por Intel
import math

class imageShape:

    def __init__(self, width, height):
        img_z = np.zeros((height, width, 3), np.uint8)
        self.width = width      #Se guarda la imagen en self
        self.height = height
        self.img=img_z
        self.figur='a'
    def generateShape(self):   # método para obtener alto y ancho de la imagen
        width=self.width
        height=self.height
        figura=np.random.randint(4)
        img_z = np.zeros((height, width, 3), np.uint8)
        centro = [round(width / 2), round(height / 2)]
        if figura == 0:
            lado = min(height, width) / 2
            h = math.sqrt((lado ** 2) - ((lado / 2) ** 2))
            v1 = [centro[0], centro[1] - round(h / 2)]
            v2 = [centro[0] - round(lado / 2), centro[1] + round(h / 2)]
            v3 = [centro[0] + round(lado / 2), centro[1] + round(h / 2)]
            pts = np.array([v1, v2, v3])
            img = cv2.fillPoly(img_z, pts=[pts], color=(246, 176, 0))
            figur='triangulo'
        elif figura == 1:

            lado = min(height, width) / 2.08
            diagonal = math.sqrt(((2 * lado) ** 2))
            v1 = [centro[0], centro[1] - round(diagonal / 2)]
            v2 = [centro[0] - round(diagonal / 2), centro[1]]
            v3 = [centro[0] + round(diagonal / 2), centro[1]]
            v4 = [centro[0], centro[1] + round(diagonal / 2)]
            pts = np.array([v1, v2, v4, v3])
            img = cv2.fillPoly(img_z, pts=[pts], color=(246, 176, 0))
            figur = 'cuadrado'
        elif figura == 2:
            alto = (height / 2)
            ancho = (width / 2)
            v1 = ((centro[0] - round(ancho / 2)), (centro[1] - round(alto / 2)))
            v2 = ((centro[0] + round(ancho / 2)), (centro[1] + round(alto / 2)))
            img = cv2.rectangle(img_z, v1, v2, (246, 176, 0), -1)
            figur = 'rectangulo'
        elif figura == 3:
            radio = round(min(height, width) / 4)
            img = cv2.circle(img_z, (centro[0], centro[1]), radio, (246, 176, 0), -1)
            figur = 'circulo'
        self.img=img
        self.figur=figur

    def showShape(self):
        cv2.imshow("Image",self.img)
        cv2.waitKey(5000)

    def getShape(self):

        return self.img , self.figur

    def whatShape(self,img):
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        ret, Ibw_shapes = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

        W = 1
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2 * W + 1, 2 * W + 1))
        mask_eroded = cv2.morphologyEx(Ibw_shapes, cv2.MORPH_OPEN, kernel)
        W = 5
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2 * W + 1, 2 * W + 1))
        mask_dilated = cv2.morphologyEx(mask_eroded, cv2.MORPH_CLOSE, kernel)

        contours, hierarchy = cv2.findContours(Ibw_shapes, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        epsilon = 0.01 * cv2.arcLength(contours[0], True)
        approx = cv2.approxPolyDP(contours[0], epsilon, True)
        x, y, w, h = cv2.boundingRect(approx)
        if len(approx) == 3:
            figur = 'triangulo'
        elif len(approx) == 4:
            relacion = float(w) / h

            if (relacion >= 0.9) & (relacion <= 1.1):
                figur = 'cuadrado'
            else:
                figur = 'rectangulo'
        elif len(approx) >= 12:
            figur = 'circulo'

        return  figur
